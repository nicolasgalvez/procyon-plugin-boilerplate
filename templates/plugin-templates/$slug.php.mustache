<?php
/**
 * Plugin Name:       {{title}}
{{#pluginURI}}
 * Plugin URI:        {{{pluginURI}}}
{{/pluginURI}}
{{#description}}
 * Description:       {{description}}
{{/description}}
 * Version:           {{version}}
{{#requiresAtLeast}}
 * Requires at least: {{requiresAtLeast}}
{{/requiresAtLeast}}
{{#requiresPHP}}
 * Requires PHP:      {{requiresPHP}}
{{/requiresPHP}}
{{#author}}
 * Author:            {{author}}
{{/author}}
{{#license}}
 * License:           {{license}}
{{/license}}
{{#licenseURI}}
 * License URI:       {{{licenseURI}}}
{{/licenseURI}}
 * Text Domain:       {{textdomain}}
{{#domainPath}}
 * Domain Path:       {{{domainPath}}}
{{/domainPath}}
{{#updateURI}}
 * Update URI:        {{{updateURI}}}
{{/updateURI}}
 *
 * @package           {{namespace}}
 */

{{#namespace}}
namespace {{namespace}};
{{/namespace}}

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

require_once __DIR__ . '/vendor/autoload.php';

use YahnisElsts\PluginUpdateChecker\v5\PucFactory;

{{#updateURI}}
    $myUpdateChecker = PucFactory::buildUpdateChecker(
	'{{updateURI}}',
	__FILE__, //Full path to the main plugin file
	'{{slug}}'
);
{{/updateURI}}
{{^updateURI}}
$myUpdateChecker = PucFactory::buildUpdateChecker(
	'https://github.com/{{githubAccount}}/{{slug}}/',
	__FILE__, //Full path to the main plugin file
	'{{slug}}'
);
{{/updateURI}}

$myUpdateChecker->getVcsApi()->enableReleaseAssets();

//Set the branch that contains the stable release.
$myUpdateChecker->setBranch( 'main' );

/**
 * Registers the block using the metadata loaded from the `block.json` file.
 * Behind the scenes, it registers also all assets so they can be enqueued
 * through the block editor in the corresponding context.
 *
 * @see https://developer.wordpress.org/reference/functions/register_block_type/
 */
function {{namespaceSnakeCase}}_{{slugSnakeCase}}_block_init() {
    $blocks = array_filter( scandir( __DIR__ . '/build' ), function( $file ) {
        return is_dir( __DIR__ . '/build/' . $file ) && ! in_array( $file, [ '.', '..' ] );
    } );
    foreach ( $blocks as $block ) {
        register_block_type_from_metadata( __DIR__ . '/build/' . $block );
    }
}
add_action( 'init', '{{#namespace}}{{namespacePascalCase}}\{{/namespace}}{{namespaceSnakeCase}}_{{slugSnakeCase}}_block_init' );
